const mongoose = require('mongoose');

const venueSchema = new mongoose.Schema({
  name: { 
    type: String, 
    required: true,
    trim: true
  },
  description: { 
    type: String, 
    required: true 
  },
  fullDescription: {
    type: String,
    default: function() {
      return this.description;
    }
  },
  images: {
    type: [String],
    default: []
  },
  price: {
    type: Number,
    required: true
  },
  rating: {
    type: Number,
    default: 4.5,
    min: 1,
    max: 5
  },
  reviews: {
    type: Number,
    default: 0
  },
  location: {
    type: String,
    required: true
  },
  capacity: {
    type: String,
    required: true
  },
  amenities: {
    type: [String],
    default: ["Catering", "Parking"]
  },
  eventTypes: {
    type: [String],
    default: ["Wedding", "Birthday Party", "Corporate Event"]
  },
  suitableEvents: {
    type: [Number], // Reference to event category IDs
    required: true
  },
  contactInfo: {
    phone: { type: String },
    email: { type: String },
    website: { type: String }
  },
  availableDates: {
    type: [Date],
    default: []
  },
  policies: {
    cancellation: { 
      type: String,
      default: "Contact for cancellation policy"
    },
    payment: {
      type: String,
      default: "50% advance required"
    }
  },
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  count: {
    type: Number,
    default: 0
  },
  isAutoGenerated: {
    type: Boolean,
    default: false
  },
  originalRequestId: {
    type: String,
    default: null
  },
  inclusions: {
    type: [String],
    default: ["Basic decoration", "Sound system", "Parking space", "Backup power"]
  },
  exclusions: {
    type: [String],
    default: ["Food & beverages", "Custom decoration", "Photography"]
  },
  serviceFee: {
    type: Number,
    default: 3000
  },
  gstPercent: {
    type: Number,
    default: 18
  },
  cancellationPolicy: {
    fullRefund: { type: Number, default: 7 },
    partialRefund: { type: Number, default: 3 },
    partialRefundPercent: { type: Number, default: 50 }
  }
}, { timestamps: true });

// Update the timestamp when document is updated
venueSchema.pre('save', function(next) {
  this.updatedAt = Date.now();
  next();
});

// Create text index for search functionality
venueSchema.index({ 
  name: 'text', 
  description: 'text', 
  location: 'text',
  'amenities': 'text',
  'eventTypes': 'text'
});

module.exports = mongoose.model('Venue', venueSchema); 